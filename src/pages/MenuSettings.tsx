import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Textarea } from "@/components/ui/textarea";
import { Link } from "react-router-dom";
import Navigation from "@/components/Navigation";
import Icon from "@/components/ui/icon";

const MenuSettings = () => {
  const [people, setPeople] = useState("2");
  const [days, setDays] = useState("7");
  const [meals, setMeals] = useState<string[]>([
    "breakfast",
    "lunch",
    "dinner",
  ]);
  const [diet, setDiet] = useState("");
  const [preferences, setPreferences] = useState("");
  const [budget, setBudget] = useState([500]);
  const [complexity, setComplexity] = useState("any");

  const handleMealChange = (meal: string, checked: boolean) => {
    if (checked) {
      setMeals([...meals, meal]);
    } else {
      setMeals(meals.filter((m) => m !== meal));
    }
  };

  const mealOptions = [
    { id: "breakfast", label: "–ó–∞–≤—Ç—Ä–∞–∫", emoji: "üåÖ" },
    { id: "lunch", label: "–û–±–µ–¥", emoji: "üçΩÔ∏è" },
    { id: "dinner", label: "–£–∂–∏–Ω", emoji: "üåô" },
    { id: "snack", label: "–ü–µ—Ä–µ–∫—É—Å", emoji: "üçé" },
  ];

  const dietOptions = [
    "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ",
    "–í–µ–≥–∞–Ω—Å—Ç–≤–æ",
    "–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞",
    "–ë–µ–∑ –º–æ–ª–æ–∫–∞",
    "–ë–µ–∑ –æ—Ä–µ—Ö–æ–≤",
    "–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–∞—è",
    "–ö–µ—Ç–æ",
    "–ü–µ—Å–∫–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ",
    "–ü–∞–ª–µ–æ",
    "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è",
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-white">
      <Navigation />

      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é
          </h1>
          <p className="text-xl text-gray-600">
            –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, –∏ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
          </p>
        </div>

        <Card className="shadow-lg border-0">
          <CardHeader className="bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-t-lg">
            <CardTitle className="text-2xl flex items-center">
              <Icon name="Settings" className="mr-3 h-6 w-6" />
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–Ω—é
            </CardTitle>
            <CardDescription className="text-purple-100">
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            </CardDescription>
          </CardHeader>

          <CardContent className="p-8 space-y-8">
            {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ */}
            <div className="space-y-3">
              <Label className="text-lg font-medium flex items-center">
                üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫
              </Label>
              <Select value={people} onValueChange={setPeople}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">1 —á–µ–ª–æ–≤–µ–∫</SelectItem>
                  <SelectItem value="2">2 —á–µ–ª–æ–≤–µ–∫–∞</SelectItem>
                  <SelectItem value="3">3 —á–µ–ª–æ–≤–µ–∫–∞</SelectItem>
                  <SelectItem value="4">4 —á–µ–ª–æ–≤–µ–∫–∞</SelectItem>
                  <SelectItem value="5+">5+ —á–µ–ª–æ–≤–µ–∫</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π */}
            <div className="space-y-4">
              <Label className="text-lg font-medium flex items-center">
                üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
              </Label>
              <RadioGroup
                value={days}
                onValueChange={setDays}
                className="grid grid-cols-2 md:grid-cols-4 gap-4"
              >
                {["3", "5", "7", "10"].map((day) => (
                  <div
                    key={day}
                    className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-purple-50"
                  >
                    <RadioGroupItem value={day} id={`days-${day}`} />
                    <Label htmlFor={`days-${day}`} className="cursor-pointer">
                      {day}{" "}
                      {day === "1"
                        ? "–¥–µ–Ω—å"
                        : day === "2" || day === "3" || day === "4"
                          ? "–¥–Ω—è"
                          : "–¥–Ω–µ–π"}
                    </Label>
                  </div>
                ))}
              </RadioGroup>
            </div>

            {/* –ü—Ä–∏–µ–º—ã –ø–∏—â–∏ */}
            <div className="space-y-4">
              <Label className="text-lg font-medium flex items-center">
                üç≥ –ü—Ä–∏–µ–º—ã –ø–∏—â–∏
              </Label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {mealOptions.map((meal) => (
                  <div
                    key={meal.id}
                    className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-purple-50"
                  >
                    <Checkbox
                      id={meal.id}
                      checked={meals.includes(meal.id)}
                      onCheckedChange={(checked) =>
                        handleMealChange(meal.id, checked as boolean)
                      }
                    />
                    <Label
                      htmlFor={meal.id}
                      className="cursor-pointer flex items-center"
                    >
                      <span className="mr-2">{meal.emoji}</span>
                      {meal.label}
                    </Label>
                  </div>
                ))}
              </div>
            </div>

            {/* –î–∏–µ—Ç—ã - –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç */}
            <div className="space-y-3">
              <Label className="text-lg font-medium flex items-center">
                üö´ –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
              </Label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {dietOptions.map((option) => (
                  <div
                    key={option}
                    className="flex items-center space-x-2 p-2 border rounded-lg hover:bg-purple-50"
                  >
                    <Checkbox
                      id={`diet-${option}`}
                      checked={diet.includes(option.toLowerCase())}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          setDiet(
                            diet
                              ? `${diet}, ${option.toLowerCase()}`
                              : option.toLowerCase(),
                          );
                        } else {
                          setDiet(
                            diet
                              .split(", ")
                              .filter((d) => d !== option.toLowerCase())
                              .join(", "),
                          );
                        }
                      }}
                    />
                    <Label
                      htmlFor={`diet-${option}`}
                      className="cursor-pointer text-sm"
                    >
                      {option}
                    </Label>
                  </div>
                ))}
              </div>
              {diet && (
                <div className="mt-2 p-2 bg-purple-50 rounded-lg">
                  <span className="text-sm text-purple-700">
                    –í—ã–±—Ä–∞–Ω–æ: {diet}
                  </span>
                </div>
              )}
            </div>

            {/* –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è */}
            <div className="space-y-3">
              <Label className="text-lg font-medium flex items-center">
                ‚ù§Ô∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
              </Label>
              <Textarea
                value={preferences}
                onChange={(e) => setPreferences(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –µ–¥–∏—Ç–µ (–ª—É–∫, –≥—Ä–∏–±—ã...) –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ (–∫—É—Ä–∏—Ü–∞, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã...)"
                className="min-h-[100px]"
              />
            </div>

            {/* –ë—é–¥–∂–µ—Ç */}
            <div className="space-y-4">
              <Label className="text-lg font-medium flex items-center">
                üí∞ –ë—é–¥–∂–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –¥–µ–Ω—å: {budget[0]} ‚ÇΩ
              </Label>
              <Slider
                value={budget}
                onValueChange={setBudget}
                min={200}
                max={2000}
                step={50}
                className="w-full"
              />
              <div className="flex justify-between text-sm text-gray-500">
                <span>200 ‚ÇΩ</span>
                <span>2000 ‚ÇΩ</span>
              </div>
            </div>

            {/* –°–ª–æ–∂–Ω–æ—Å—Ç—å */}
            <div className="space-y-4">
              <Label className="text-lg font-medium flex items-center">
                üí° –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
              </Label>
              <RadioGroup
                value={complexity}
                onValueChange={setComplexity}
                className="grid grid-cols-2 md:grid-cols-4 gap-4"
              >
                {[
                  { value: "easy", label: "–õ–µ–≥–∫–∏–π", emoji: "üòä" },
                  { value: "medium", label: "–°—Ä–µ–¥–Ω–∏–π", emoji: "ü§î" },
                  { value: "hard", label: "–°–ª–æ–∂–Ω—ã–π", emoji: "üî•" },
                  { value: "any", label: "–õ—é–±–æ–π", emoji: "üéØ" },
                ].map((level) => (
                  <div
                    key={level.value}
                    className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-purple-50"
                  >
                    <RadioGroupItem
                      value={level.value}
                      id={`complexity-${level.value}`}
                    />
                    <Label
                      htmlFor={`complexity-${level.value}`}
                      className="cursor-pointer flex items-center"
                    >
                      <span className="mr-2">{level.emoji}</span>
                      {level.label}
                    </Label>
                  </div>
                ))}
              </RadioGroup>
            </div>

            <div className="pt-6 border-t">
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button
                  size="lg"
                  className="bg-purple-600 hover:bg-purple-700 text-white px-8"
                >
                  <Icon name="Sparkles" className="mr-2 h-5 w-5" />
                  –°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é —Å –ò–ò
                </Button>
                <Link to="/">
                  <Button
                    size="lg"
                    variant="outline"
                    className="border-purple-200 text-purple-700 hover:bg-purple-50 px-8"
                  >
                    <Icon name="ArrowLeft" className="mr-2 h-5 w-5" />
                    –ù–∞–∑–∞–¥
                  </Button>
                </Link>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default MenuSettings;
